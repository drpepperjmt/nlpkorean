# -*- coding: utf-8 -*-
"""nlpkorean.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RAn-_rVLeniNVfR1tlDMmA1cul7lULPl
"""

pip install konlpy

comSentence = u'정부는 취약 계층에게 소득 분위에 따라 100만원, 200만원, 300만원을 차등 지급하기로 결정하였다.'
sentences = []
n = 10000
with open('wordlist.txt', 'r') as f:
  for i in range(n):
      sentences.append(f.readline())

from konlpy.tag import Kkma
from konlpy.tag import Okt
from konlpy.tag import Komoran
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import time
kkma = Kkma()
okt = Okt()
komoran = Komoran()

startTime = time.time()

# kkma 형태소 분석기
comTk = kkma.pos(comSentence)
comTk = [''.join(list(t)) for t in comTk]
comTk = ' '.join(comTk)

ttks = []
for sentence in sentences:
  ttk = kkma.pos(sentence)
  ttk = [''.join(list(t)) for t in ttk]
  ttk = ' '.join(ttk)
  ttks.append(ttk)

tks = []
for i in range(n):
  tk = (comTk, ttks[i])
  tks.append(tk)

# 형태소 벡터화
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrixs = []
for i in range(n):
  tfidf_matrix = tfidf_vectorizer.fit_transform(tks[i])
  tfidf_matrixs.append(tfidf_matrix)

# 코사인 유사도 계산
similarities = []
for i in range(n):
  similarities.append(cosine_similarity(tfidf_matrixs[i][0:1], tfidf_matrixs[i][1:2])[0][0])

endTime = time.time()
processTime = endTime - startTime

# 가장 높은 유사도 문장 구하기
pair = []
for i in range(n):
  pair.append([similarities[i], sentences[i]])

pair.sort()
pair.reverse()

print (processTime)
print (pair[0][0], pair[0][1])
print (pair[99][0], pair[99][1])

startTime = time.time()

# Okt 형태소 분석기
comTk = okt.pos(comSentence)
comTk = [''.join(list(t)) for t in comTk]
comTk = ' '.join(comTk)

ttks = []
for sentence in sentences:
  ttk = okt.pos(sentence)
  ttk = [''.join(list(t)) for t in ttk]
  ttk = ' '.join(ttk)
  ttks.append(ttk)

tks = []
for i in range(n):
  tk = (comTk, ttks[i])
  tks.append(tk)

# 형태소 벡터화
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrixs = []
for i in range(n):
  tfidf_matrix = tfidf_vectorizer.fit_transform(tks[i])
  tfidf_matrixs.append(tfidf_matrix)

# 코사인 유사도 계산
similarities = []
for i in range(n):
  similarities.append(cosine_similarity(tfidf_matrixs[i][0:1], tfidf_matrixs[i][1:2])[0][0])

endTime = time.time()
processTime = endTime - startTime

# 가장 높은 유사도 문장 구하기
pair = []
for i in range(n):
  pair.append([similarities[i], sentences[i]])

pair.sort()
pair.reverse()

print (processTime)
print (pair[0][0], pair[0][1])
print (pair[99][0], pair[99][1])

startTime = time.time()

# komoran 형태소 분석기
comTk = komoran.pos(comSentence)
comTk = [''.join(list(t)) for t in comTk]
comTk = ' '.join(comTk)

ttks = []
for sentence in sentences:
  ttk = komoran.pos(sentence)
  ttk = [''.join(list(t)) for t in ttk]
  ttk = ' '.join(ttk)
  ttks.append(ttk)

tks = []
for i in range(n):
  tk = (comTk, ttks[i])
  tks.append(tk)

# 형태소 벡터화
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrixs = []
for i in range(n):
  tfidf_matrix = tfidf_vectorizer.fit_transform(tks[i])
  tfidf_matrixs.append(tfidf_matrix)

# 코사인 유사도 계산
similarities = []
for i in range(n):
  similarities.append(cosine_similarity(tfidf_matrixs[i][0:1], tfidf_matrixs[i][1:2])[0][0])

endTime = time.time()
processTime = endTime - startTime

# 가장 높은 유사도 문장 구하기
pair = []
for i in range(n):
  pair.append([similarities[i], sentences[i]])

pair.sort()
pair.reverse()

print (processTime)
print (pair[0][0], pair[0][1])
print (pair[99][0], pair[99][1])